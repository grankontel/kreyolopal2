# Use postgres/example user/password credentials
name: kreyolopal

services:

  db:
    image: postgres:16.1-alpine
    container_name: "my_postgres"
    environment:
      DB_SCHEMA: ${DB_SCHEMA}
      DB_ANON_ROLE: ${DB_ANON_ROLE}
      DB_API_ROLE: ${DB_API_ROLE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - "./initdb:/docker-entrypoint-initdb.d:ro"
    ports:
      - "5432:5432"
      
  adminer:
    image: adminer
    container_name: "adminer"
    restart: always
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - db

  postgrest:
    image: postgrest/postgrest
    container_name: "postgrest"
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:9000
      # The secret to verify the JWT for authenticated requests with.
      # Needs to be 32 characters minimum. 
      # echo "PGRST_JWT_SECRET = \"$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c32)\""
      - PGRST_JWT_SECRET=${PGRST_JWT_SECRET}
      - PGRST_ADMIN_SERVER_PORT=3001
    ports:
      - "127.0.0.1:9000:3000"
      - "127.0.0.1:9010:3001"
    depends_on:
      - db

  # swagger:
  #   image: swaggerapi/swagger-ui
  #   container_name: "swagger"
  #   ports:
  #     - "9080:8080"
  #   environment:
  #     API_URL: http://localhost:9000/
  #   depends_on:
  #     - postgrest

  mongo:
    image: mongo
    # openssl rand -base64 756 > ./data/keys/keyFile.key 
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--keyFile" ,"/data/keys/keyFile.key"]
    # command: ["--bind_ip_all", "--port", "27017"]
    # add '127.0.0.1       host.docker.internal' to /etc/hosts
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30      
    restart: always
    container_name: "mongo"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ./data/mongodb:/data/db
      - ./data/keys:/data/keys
    ports:
      - "27017:27017"

volumes:
  db:
