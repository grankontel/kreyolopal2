/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/7Zyk89nt9tB
 */
import Link from 'next/link'
import { KreyolLanguage, IconAttributes } from '@kreyolopal/react-ui'
import { DictionaryEntry, UserDictionaryEntry } from '@/lib/types'
import { hashKey, onlyUnique } from '@/lib/utils'
import { EntryDefinition } from './entry-definition'
import { EntryBookmarkButton } from './entry-bookmark-button'

export function Entry({
  kreyol,
  value,
  dicoUrl,
  ...props
}: {
  kreyol: KreyolLanguage
  value: UserDictionaryEntry
  dicoUrl: (word: string) => string
}) {
  const source: DictionaryEntry = (
    value.is_bookmarked ? value.bookmark : value.entry
  ) as DictionaryEntry

  const relatedList = [source]
    .map((entry) => {
      const syns = entry.definitions
        .map((def) => {
          return def.synonyms
        })
        .flat()
      const confer = entry.definitions
        .map((def) => {
          return def.confer
        })
        .flat()
      return syns.concat(confer)
    })
    .flat()
    .filter(onlyUnique)

  return (
    <div className="flex flex-col min-h-screen" {...props}>
      <main className="flex-1 py-6">
        <div className="container space-y-6 px-4 md:px-6">
          <div className="grid items-start gap-2">
            <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl">
              <span className="flex items-center gap-2">
                <EntryBookmarkButton entry={source.entry} bookmarked={value.is_bookmarked} />
                {source.entry}
              </span>
            </h1>
            <p className="text-gray-500 dark:text-gray-400">
              {source.variations.join(' /')}
            </p>
          </div>
          <div className="above-article flex flex-row">
            <article className="gap-2  basis-3/4">
              {source.definitions.map((definition, index) => (
                <EntryDefinition
                  key={hashKey('key_', source.entry + ':' + index)}
                  entry={source.entry}
                  index={index + 1}
                  definition={definition}
                  dicoUrl={dicoUrl}
                />
              ))}
            </article>

            <aside className="hidden md:block  basis-1/4 px-4">
              {relatedList.length === 0 ? (
                ' '
              ) : (
                <div className="sticky top-20">
                  <div className="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold mb-2">Voir aussi</h3>
                    <ul className="space-y-2">
                      {relatedList.map((item: string) => (
                        <li key={hashKey('also_', item)}>
                          <Link
                            className="text-gray-700 dark:text-gray-300 hover:underline"
                            href={dicoUrl(item)}
                          >
                            {item.charAt(0).toUpperCase() + item.slice(1)}
                          </Link>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              )}
            </aside>
          </div>
        </div>
      </main>
    </div>
  )
}

function BookmarkedIcon(props: IconAttributes) {
  return (
    <svg
      {...props}
      width="15"
      height="15"
      viewBox="0 0 15 15"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.5 2C3.22386 2 3 2.22386 3 2.5V13.5C3 13.6818 3.09864 13.8492 3.25762 13.9373C3.41659 14.0254 3.61087 14.0203 3.765 13.924L7.5 11.5896L11.235 13.924C11.3891 14.0203 11.5834 14.0254 11.7424 13.9373C11.9014 13.8492 12 13.6818 12 13.5V2.5C12 2.22386 11.7761 2 11.5 2H3.5Z"
        fill="currentColor"
        fill-rule="evenodd"
        clip-rule="evenodd"
      ></path>
    </svg>
  )
}

function BookmarkIcon(props: IconAttributes) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" />
    </svg>
  )
}
