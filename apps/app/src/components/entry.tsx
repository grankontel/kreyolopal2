/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/7Zyk89nt9tB
 */
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { KreyolLanguage } from '@kreyolopal/react-ui'
import { DictionaryEntry } from '@/lib/types'
import { hashKey, onlyUnique } from '@/lib/utils'
import { EntryDefinition } from './entry-definition'

export function Entry({
  kreyol,
  word,
  dicoUrl,
  ...props
}: {
  kreyol: KreyolLanguage
  word: DictionaryEntry
  dicoUrl: (word: string) => string
}) {
  const relatedList = [word]
    .map((entry) => {
      const syns = entry.definitions
        .map((def) => {
          return def.synonyms
        })
        .flat()
      const confer = entry.definitions
        .map((def) => {
          return def.confer
        })
        .flat()
      return syns.concat(confer)
    })
    .flat()
    .filter(onlyUnique)

  return (
    <div className="flex flex-col min-h-screen" {...props}>
      <main className="flex-1 py-6">
        <div className="container space-y-6 px-4 md:px-6">
          <div className="grid items-start gap-2">
            <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl">
              <span className="flex items-center gap-2">
                <Button size="icon" variant="outline">
                  <BookmarkIcon className="h-6 w-6" />
                </Button>
                {word.entry}
              </span>
            </h1>
            <p className="text-gray-500 dark:text-gray-400">
              {word.variations.join(' /')}
            </p>
          </div>
          <div className="above-article flex flex-row">
            <article className="gap-2  basis-3/4">
              {word.definitions.map((definition, index) => (
                <EntryDefinition
                  key={hashKey('key_', word.entry + ':' + index)}
                  entry={word.entry}
                  index={index + 1}
                  definition={definition}
                  dicoUrl={dicoUrl}
                />
              ))}
            </article>

            <aside className="hidden md:block  basis-1/4 px-4">
              {relatedList.length === 0 ? (
                ' '
              ) : (
                <div className="sticky top-20">
                  <div className="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold mb-2">Voir aussi</h3>
                    <ul className="space-y-2">
                      {relatedList.map((item: string) => (
                        <li key={hashKey('also_', item)}>
                          <Link
                            className="text-gray-700 dark:text-gray-300 hover:underline"
                            href={dicoUrl(item)}
                          >
                            {item.charAt(0).toUpperCase() + item.slice(1)}
                          </Link>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              )}
            </aside>
          </div>
        </div>
      </main>
    </div>
  )
}

function BookmarkIcon(props: IconAttributes) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" />
    </svg>
  )
}
