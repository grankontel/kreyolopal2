'use client'
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/8CrEgdl2Y1u
 */
import { useState } from 'react'
import { CopyToClipboard } from 'react-copy-to-clipboard'
import { Can } from '@/components/can'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { StarRating } from '@kreyolopal/react-ui'
import { SpellcheckResponse } from '@/lib/types'
import {
  postSpellCheck,
  postRateCorrection,
  PostSpellCheckResponse,
} from '@/queries/post-spellcheck'
import { useDicoStore } from '@/store/dico-store'
import { useToast } from '@/components/ui/use-toast'
import { useDashboard } from '@/components/dashboard/dashboard-provider'
import { AnyAbility } from '@casl/ability'

function addEmphasis(src: string) {
  const strArray = Array.from(src)

  var inEm = false
  const result = strArray
    .map((c) => {
      var rep = c
      if (c === '~') {
        rep = inEm ? '</mark>' : '<mark>'
        inEm = !inEm
      }
      return rep
    })
    .join('')
  return result
}

export function SpellcheckForm() {
  const [request, setRequest] = useState('')
  const [copied, setCopied] = useState(false)
  const [response, setResponse] = useState<SpellcheckResponse>()
  const user = useDicoStore((state) => state.user)
  const { toast } = useToast()
  const auth = useDashboard()

  const setErrorMessage = (msg: string) => {
    toast({
      title: 'Erreur',
      variant: 'destructive',
      description: msg,
    })
  }
  const clearForm = () => {
    setResponse(undefined)
    setCopied(false)
    setRequest('')
  }

  const rateCorrection = (note: number) => {
    if (response?.id === undefined) return

    try {
      const resp = postRateCorrection(user?.bearer || '', response?.id, {
        rating: note,
      })

      resp.then((data) => {
        if (data.id === undefined) {
          setErrorMessage('Il y a des erreurs')
        }
      })
    } catch (error) {
      setErrorMessage(error as string)
    }
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault()
    console.log('submitting...')
    setResponse(undefined)
    setCopied(false)

    try {
      postSpellCheck(user?.bearer || '', request).then((data) => {
        if (data?.id === undefined) {
          setErrorMessage('Erreur de zakari')
        } else {
          const result: SpellcheckResponse = data?.response as SpellcheckResponse
          result.html = addEmphasis(result.message)
          result.id = data?.id as string

          setResponse(result)
        }
      })
    } catch (error) {
      setErrorMessage(error as string)
    }
  }

  return (
    <div className="w-full max-w-2xl space-y-4">
      <div className="flex items-center justify-center rounded-lg border border-dashed p-4">
        <form className="w-full space-y-4" onSubmit={handleSubmit}>
          <div className="grid w-full">
            <Label className="text-base" htmlFor="text">
              Entrez le texte à corriger
            </Label>
            <Textarea
              id="source"
              name="source"
              placeholder="Entrez le texte à corriger ici..."
              rows={8}
              value={request}
              onChange={(e) => {
                setRequest(e.target.value)
                setCopied(false)
              }}
            />
          </div>
          <div className="flex w-full items-center space-x-2">
            <Can
              do="request"
              on="spellcheck"
              passThrough
              ability={auth?.enforcer as AnyAbility}
            >
              {(allowed: boolean) => (
                <Button
                  className="w-[140px]"
                  disabled={!allowed}
                  type="submit"
                  variant="logo"
                >
                  Vérifier
                </Button>
              )}
            </Can>
            <Button
              className="w-[80px]"
              type="button"
              onClick={() => {
                clearForm()
              }}
            >
              Effacer
            </Button>
          </div>
        </form>
      </div>
      <div className="grid w-full gap-2">
        <Label className="text-base" htmlFor="corrected">
          Texte corrigé
        </Label>
        <div
          className="border-input placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[120px] w-full rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50"
          id="corrected"
        >
          <p dangerouslySetInnerHTML={{ __html: response?.html || '' }} />
        </div>
        <div className="flex w-full items-center justify-between space-x-2">
          <CopyToClipboard text={response?.message || ''} onCopy={() => setCopied(true)}>
            <Button className="w-[160px]" type="button" disabled={response === undefined}>
              Copier
            </Button>
          </CopyToClipboard>
          <div className="flex items-center space-x-1">
            <Can
              do="rate"
              on="spellcheck"
              passThrough
              ability={auth?.enforcer as AnyAbility}
            >
              {(allowed: boolean) => (
                <StarRating
                  hidden={response === undefined}
                  disabled={!allowed}
                  onRated={rateCorrection}
                />
              )}
            </Can>
          </div>
        </div>
      </div>
    </div>
  )
}
